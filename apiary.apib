FORMAT: 1A
HOST: https://sirius.swisschain.io/

# Sirius - Brokerage API 

Sirius is an API allowing consumers to work with wallets and transfers in many different blockchains in the common manner. 
You don't need to learn particularities of all the blockchains to receive crypto or tockens from your users or to send withdrawals to someone.

It's easy as one, two, three!

1. Create as many brokerage accounts as you need.
2. Create accounts associated with your users, contracts, bills, or whatever you need whithin these broker accounts.
3. You are ready to receive deposits and send withdrawals using our awesome API!

# API usage

## Allowed HTTP Verbs
- `PUT` : Updates a resource 
- `POST` : Creates a resource
- `GET` : Gets a resource or list of resources
- `DELETE` : Deletes a resource

## Description Of Usual Server Responses
- 200 `OK` : the request was successful.
- 201 `Created` : the request was successful and a resource was created.
- 204 `No Content` : the request was successful but there is no representation to return.
- 400 `Bad Request` : the request has invalid or missing required parameters.
- 401 `Unauthorized` : authentication failed.
- 403 `Forbidden` : access denied.
- 404 `Not Found` : resource was not found.

## Authorization

TODO

## Pagination

TODO

## Error responses

TODO

## Data structures

### Order (enum)

Order of the sorting

+ `asc` - Ascending sorting order
+ `desc` - Descending sorting order

### NetworkType (enum)

Type of a blockchain network

+ `private` - Private blockchain visible only for particular customer.
+ `test` - Public test blockchain.
+ `public` - Public mainnet blockchain.

### BrokerAccountState (enum)

State of the broker account

+ `creating` - The broker account is not fully created yet, you need to wait a bit, while Sirius complete its creation. You can create accounts within it, but not receive or send transfers.
+ `active` - The broker account is active and can be used as usual.
+ `blocked` - The broker account is blocked - processing of all deposits and withdrawals is on hold.

### AccountState (enum)

State of the account

+ `creating` - The account is not fully created yet, you need to wait a bit, while Sirius complete its creation. You can't receive or send transfers.
+ `active` - The account is active and can be used as usual.
+ `blocked` - The account is blocked - processing of all deposits and withdrawals is on hold.

## Blockchain [/api/blockchains{?blockchainId,name,protocolCode,protocolName,networkType,order,cursor,limit}]

We distinguish _Blockchain_, _Protocol_, and _Network Type_. 

_Blockchain_ is not just _Bitcoin_ or _Ethereum_, it's a particular network. For example _Bitcoin MainNet_, 
_Ethereum Ropsten_ are blockchains, whilst _Bitcoin_ and _Ethereum_ are protocols which are used by these blockchains.
Networks can be one of the types - `private`, `test`, `public`. So _Blockchain_ has a protocol and network type.

- _Blockchain_ is an "instance" of the protocol - Ethereum Ropsten, Bitcoin Mainnet, Ethereum Mainnet.
- _Protocol_ is a set of rules on how blockchain nodes interact with each other - Bitcoin, Ethereum, Ripple.
- _Network type_ can be private, test, or public.

---

+ Attributes
    + blockchainId: `bitcoin-mainnet` - unique identifier. 
    + name: `Bitcoin MainNet` - Name of the blockchain.
    + networkType: `public` (NetworkType) - Type of the network
    + protocol - Protocol of the blockchain.
        + code: `bitcoin` - Unique code of the protocol.
        + name: `Bitcoin` - Name of the protocol.

### Search blockchains [GET]

`GET /api/blockchains`

Searches blockchains.

+ Request
    + Headers
        
            Authorization: Bearer Your-JWT-Token

+ Parameters
    + blockchainId : `bitcoin-mainnet` (optional, string) - Exact ID of the blockchain to search
    + name : `Bit` (optional, string) - Text to search in the name of the blockchain
    + protocolCode : `bitcoin` (optional, string) - Exact ode of the protocol to search
    + protocolName : `coin` (optional, string) - Text to search in the name of the protocol
    + networkType : `public` (optional, array[NetworkType]) - Coma separated list of the network types to search
    + order : `asc` (optional, Order) - Result items sorting order
    + cursor : `bitcoin-mainnet` (optional, string) - Cursor to continue the search
    + limit : `20` (optional, number) - Maximum number of items to return in the search results

+ Response 200 (application/json)

    + Body

            {
              "pagination": {
                "cursor": "bitcoin-mainnet",
                "count": 2,
                "order": "asc",
                "nextUrl": "/api/blockchains?order=asc&cursor=ripple-mainnet&limit=2"
              },
              "items": [
                {
                  "name": "Litecoin - MainNet",
                  "blockchainId": "litecoin-mainnet",
                  "networkType": "public",
                  "protocol": {
                    "code": "litecoin",
                    "name": "Litecoin"
                  }
                },
                {
                  "name": "Ripple - MainNet",
                  "blockchainId": "ripple-mainnet",
                  "networkType": "public",
                  "protocol": {
                    "code": "ripple",
                    "name": "Ripple"
                  }
                },
              ]
            }
            
+ Response 400 (application/json)

    + Body

            {
              "errors": {
                "order": [
                  "Invalid order"
                ],
                "limit": [
                  "Limit should be in the range 1..1000"
                ]
              }
            }

## Asset [/api/assets{?assetId,blockchainId,symbol,address,accuracy,order,cursor,limit}]

Asset represents crypto currency or token in particular _Blockchain_.

---

+ Attributes
    + assetId: 100346 (number) - Unique identifier.
    + blockchainId: `ethereum-mainnet` - uniqueue identifier of the blockchain to which the asset is related to. 
    + symbol: `USDT` - Symbol of the asset.
    + address: `0xdac17f958d2ee523a2206206994597c13d831ec7` (optional, string) - Address of the asset in the blockchain, if any.
    + accuracy: 6 (number) - Maximum number of digits after the decimal point which are supported by the asset.

### Search assets [GET]

`GET /api/assets`

Searches assets.

+ Request
    + Headers
        
            Authorization: Bearer Your-JWT-Token

+ Parameters
    + assetId: 100346 (number) - Exact ID of the asset to search
    + blockchainId: `ethereum-mainnet` - Exact ID of the blockchain to search
    + symbol: `USDT` - Text to search in the symbol of the asset
    + address: `0xdac17f958d2ee523a2206206994597c13d831ec7` (optional, string) - Exact address of the asset to search
    + accuracy: 6 (number) - Exact accuracy of the asset to search
    + order : `asc` (optional, Order) - Result items sorting order
    + cursor : `bitcoin-mainnet` (optional, string) - Cursor to continue the search
    + limit : `20` (optional, number) - Maximum number of items to return in the search results

+ Response 200 (application/json)

    + Body

            {
              "pagination": {
                "cursor": 100428,
                "count": 3,
                "order": "asc",
                "nextUrl": "/api/assets?order=asc&cursor=100431&limit=3"
              },
              "items": [
                {
                  "assetId": 100429,
                  "blockchainId": "bitcoin-testnet",
                  "symbol": "BTC",
                  "address": null,
                  "accuracy": 8
                },
                {
                  "assetId": 100430,
                  "blockchainId": "bitcoin-mainnet",
                  "symbol": "BTC",
                  "address": null,
                  "accuracy": 8
                },
                {
                  "assetId": 100431,
                  "blockchainId": "ethereum-mainnet",
                  "symbol": "USDT",
                  "address": "0xdac17f958d2ee523a2206206994597c13d831ec7",
                  "accuracy": 6
                }
              ]
            }
            
+ Response 400 (application/json)

    + Body

            {
              "errors": {
                "order": [
                  "Invalid order"
                ],
                "limit": [
                  "Limit should be in the range 1..1000"
                ]
              }
            }

## Broker Account [/api/broker-accounts]

_Broker account_ allows you to receive deposits and send withdrawals in all supported blockchains. Broker account has accounts associated with it.

Each deposit and withdrawal can be associated with particular account and each account can be associated with
anything you need to. Thanks to this, you can identify to which of your user, contract, bill or whatever particular transfer is related to.

---

+ Attributes
    + brokerAccountId: 100555 (number) - unique identifier. 
    + name: `Clients` - Name of the broker account.
    + state: `active` (BrokerAccountState) - Current state of the broker account.
    + creationDateTime: `2020-03-24T15:27:51.9313772Z` - Timestamp when the broker account creation was started.
    + activationDateTime: `2020-03-24T15:27:51.9313772Z` (optional, string) - Timestamp when the broker account was activated last time.
    + blockingnDateTime: `2020-03-24T15:27:51.9313772Z` (optional, string) - Timestamp when the broker account was blocked last time.

### Create a broker account [POST]

`POST /api/broker-accounts`

Creates a new broker account.

+ Request (application/json)
    + Headers

            X-Request-ID: Unique request ID. Use the same ID if you lost response and want to retry the request
            Authorization: Bearer Your-JWT-Token
    
    + Body

            {
                "name": "Exchange clients"
            }

+ Response 200 (application/json)

    + Body

            {
              "name": "Exchange clients",
              "brokerAccountId": 100106,
              "state": "creating",
              "creationDateTime": "2020-03-24T15:27:51.9313772Z",
              "blockingDateTime": null,
              "activationDateTime": null
            }

+ Response 400 (application/json)

    + Body

            {
              "errors": {
                "name": [
                  "Name is required"
                ],
                "X-Request-ID": [
                  "Duplicate request ID detected. Try to use another value"
                ]
              }
            }
            
### Search broker accounts [GET /api/broker-accounts{?brokerAccountId,name,state,order,cursor,limit}]

`GET /api/broker-accounts`

Searches broker accounts.

+ Parameters
    + brokerAccountId: 100106 (optional, number) - Exact ID of the broker account to search
    + name: "clients" (optional, string) - Text to search in the name of the broker accounts
    + state: "active" (optional, array[BrokerAccountState]) - List of the broker account states to search
    + order: "asc" (optional, Order) - Result items sorting order
    + cursor: 100105 (optional, number) - Cursor to continue the search
    + limit: 20 (optional, number) - Maximum number of items to return in the search results

+ Request (application/json)
    + Headers
    
            Authorization: Bearer Your-JWT-Token
    
+ Response 200 (application/json)

    + Body

            {
              "pagination": {
                "cursor": 100105,
                "count": 2,
                "order": "asc",
                "nextUrl": "/api/broker-accounts?order=asc&cursor=100108&limit=2"
              },
              "items": [
                {
                  "name": "Exchange clients",
                  "brokerAccountId": 100106,
                  "state": "active",
                  "creationDateTime": "2020-03-24T17:06:58.464Z",
                  "blockedDateTime": null,
                  "activationDateTime": "2020-03-24T17:06:58.464Z"
                },
                {
                  "name": "Corporate",
                  "brokerAccountId": 100108,
                  "state": "active",
                  "creationDateTime": "2020-03-24T17:06:28.464Z",
                  "blockedDateTime": "2020-03-24T17:06:38.464Z",
                  "activationDateTime": "2020-03-24T17:06:58.464Z"
                }
              ]
            }
            
+ Response 400 (application/json)

    + Body

            {
              "errors": {
                "order": [
                  "Invalid order"
                ],
                "limit": [
                  "Limit should be in the range 1..1000"
                ]
              }
            }
            
### Get broker account requisites [GET /api/broker-accounts/{brokerAccountId}/requisites/by-asset-id/{assetId}{?order,cursor,limit}]

`GET /api/broker-accounts/{brokerAccountId}/requisites/by-asset-id/{assetId}`

Gets broker account requisites.

+ Parameters
    + brokerAccountId: 100106 (number) - ID of the broker account
    + assetId: 100348 (number) - ID of the asset
    + order: "asc" (optional, Order) - Result items sorting order
    + cursor: 100869 (optional, number) - Cursor to continue the search
    + limit: 50 (optional, number) - Maximum number of items to return in the search results

+ Request (application/json)
    + Headers
    
            Authorization: Bearer Your-JWT-Token
    
+ Response 200 (application/json)

    + Body

            {
              "pagination": {
                "cursor": 100869,
                "count": 3,
                "order": "asc",
                "nextUrl": "/api/broker-accounts/100106/requisites/by-asset-id/100348?order=asc&cursor=100872&limit=3"
              },
              "items": [
                {
                  "brokerAccountRequisitesId": 100870,
                  "brokerAccountId": 100106,
                  "creationDateTime": "2020-03-28T22:35:28.558Z",
                  "address": "35hK24tcLEWcgNA4JxpvbkNkoAcDGqQPsP",
                  "blockchainId": "bitcoin-mainnet"
                },
                {
                  "brokerAccountRequisitesId": 100871,
                  "brokerAccountId": 100106,
                  "creationDateTime": "2020-03-28T22:35:28.558Z",
                  "address": "0x5e550bdb798eb3b1b3e0850789fc59d38486ed5d",
                  "blockchainId": "ethereum-mainnet"
                },
                {
                  "brokerAccountRequisitesId": 100872,
                  "brokerAccountId": 100106,
                  "creationDateTime": "2020-03-30T22:35:28.558Z",
                  "address": "3Q2XgoM21fUutbxkYrvJe9iZsqoG2S6RnU",
                  "blockchainId": "bitcoin-mainnet"
                }
              ]
            }
            
+ Response 400 (application/json)

    + Body

            {
              "errors": {
                "order": [
                  "Invalid order"
                ],
                "limit": [
                  "Limit should be in the range 1..1000"
                ]
              }
            }
            
+ Response 404 (application/json)
    + Body

            {
              "errors": {
                "brokerAccountId": [
                  "Broker account not found"
                ]
              }
            }
            
## Account [/api/accounts]

_Account_ allows you to distinguish deposits by the received _Broker account_ and withdrawals sent from it 
between your business objects (users, bills, contracts). While creating an _Account_ you can pass a _Reference ID_
which is ID of the object in your system associated with thi _Account_. Receiving deposits to this account,
API will pass you this _Reference ID_, so you can easily determine recipient in your system. When you execute
a withdrawal you can specify _Account_ to which this withdrawal is related to. API will notify you that
withdrawal related to particular _Account_ and _Reference ID_ is complete of failed. Also _Refernce ID_ can
be useful in analytics reports in our _Universe_ portal.

---

+ Attributes
    + accountId: 100123 (number) - unique identifier. 
    + brokerAccountId: 100555 (number) - unique identifier of the broker account, which owns the account. 
    + referenceId: "105585e04f354c79a781bf8cb812a4de" (optional, string) - unique identifier of the object in your system, associated with the account. Can be associated with several accounts.
    + state: "active" (AccountState) - Current state of the account.
    + creationDateTime: "2020-03-24T15:27:51.9313772Z" (string) - Timestamp when the account creation was started.
    + activationDateTime: "2020-03-24T15:27:51.9313772Z" (optional, string) - Timestamp when the account was activated last time.
    + blockingnDateTime: "2020-03-24T15:27:51.9313772Z" (optional, string) - Timestamp when the account was blocked last time.

### Create an account [POST]

`POST /api/accounts`

Creates a new account within specified broker account.

+ Request (application/json)
    + Headers

            X-Request-ID: Unique request ID. Use the same ID if you lost response and want to retry the request
            Authorization: Bearer Your-JWT-Token
    
    + Body

            {
                "brokerAccountId": 100106
                "referenceId": "105585e04f354c79a781bf8cb812a4de"
            }

+ Response 200 (application/json)

    + Body

            {
              "accountId": 100345,
              "referenceId": "105585e04f354c79a781bf8cb812a4de",
              "brokerAccountId": 100106,
              "state": "creating",
              "creationDateTime": "2020-03-24T15:27:51.9313772Z",
              "blockingDateTime": null,
              "activationDateTime": null
            }

+ Response 400 (application/json)

    + Body

            {
              "errors": {
                "name": [
                  "Broker account is not found"
                ],
                "X-Request-ID": [
                  "Duplicate request ID detected. Try to use another value"
                ]
              }
            }
            
### Search accounts [GET /api/accounts{?accountId,brokerAccountId,referenceId,state,order,cursor,limit}]

`GET /api/accounts`

Searches accounts.

+ Parameters
    + accountId: 100345 (optional, number) - Exact ID of the account to search
    + brokerAccountId: 100106 (optional, number) - Exact ID of the broker account to search
    + referenceId: "105585e04f354c79a781bf8cb812a4de" (optional, string) - Exact reference ID to search
    + state: "active" (optional, array[AccountState]) - List of the account states to search
    + order: "asc" (optional, Order) - Result items sorting order
    + cursor: 100105 (optional, number) - Cursor to continue the search
    + limit: 20 (optional, number) - Maximum number of items to return in the search results

+ Request (application/json)
    + Headers
    
            Authorization: Bearer Your-JWT-Token
    
+ Response 200 (application/json)

    + Body

            {
              "pagination": {
                "cursor": 100345,
                "count": 2,
                "order": "asc",
                "nextUrl": "/api/accounts?order=asc&cursor=100347&limit=2"
              },
              "items": [
                {
                  "accountId": 100346,
                  "referenceId": null,
                  "brokerAccountId": 100106,
                  "state": "active",
                  "creationDateTime": "2020-03-24T17:06:58.464Z",
                  "blockedDateTime": null,
                  "activationDateTime": "2020-03-24T17:06:58.464Z"
                },
                {
                  "accountId": 100347,
                  "referenceId": "105585e04f354c79a781bf8cb812a4de",
                  "brokerAccountId": 100106,
                  "state": "active",
                  "creationDateTime": "2020-03-24T17:06:28.464Z",
                  "blockedDateTime": "2020-03-24T17:06:38.464Z",
                  "activationDateTime": "2020-03-24T17:06:58.464Z"
                }
              ]
            }
            
+ Response 400 (application/json)

    + Body

            {
              "errors": {
                "order": [
                  "Invalid order"
                ],
                "limit": [
                  "Limit should be in the range 1..1000"
                ]
              }
            }
            
### Get account requisites [GET /api/accounts/{accountId}/requisites/by-asset-id/{assetId}{?order,cursor,limit}]

`GET /api/accounts/{accountId}/requisites/by-asset-id/{assetId}`

Gets account requisites.

+ Parameters
    + accountId: 100106 (number) - ID of the account
    + assetId: 100348 (number) - ID of the asset
    + order: "asc" (optional, Order) - Result items sorting order
    + cursor: 100869 (optional, number) - Cursor to continue the search
    + limit: 50 (optional, number) - Maximum number of items to return in the search results

+ Request (application/json)
    + Headers
    
            Authorization: Bearer Your-JWT-Token
    
+ Response 200 (application/json)

    + Body

            {
              "pagination": {
                "cursor": 100869,
                "count": 3,
                "order": "asc",
                "nextUrl": "/api/accounts/100106/requisites/by-asset-id/100348?order=asc&cursor=100872&limit=3"
              },
              "items": [
                {
                  "accountRequisitesId": 100870,
                  "accountId": 100106,
                  "creationDateTime": "2020-03-28T22:35:28.558Z",
                  "address": "35hK24tcLEWcgNA4JxpvbkNkoAcDGqQPsP",
                  "blockchainId": "bitcoin-mainnet",
                  "tag": null,
                  "tagType": null
                },
                {
                  "accountRequisitesId": 100871,
                  "accountId": 100106,
                  "creationDateTime": "2020-03-28T22:35:28.558Z",
                  "address": "0x5e550bdb798eb3b1b3e0850789fc59d38486ed5d",
                  "blockchainId": "ethereum-mainnet",
                  "tag": null,
                  "tagType": null
                },
                {
                  "accountRequisitesId": 100872,
                  "accountId": 100106,
                  "creationDateTime": "2020-03-30T22:35:28.558Z",
                  "address": "MSVJRBZpQTKyxcxdQz7R7D6hh7irixnZiK",
                  "blockchainId": "stellar-mainnet",
                  "tag": "122d7f5f0763450fb1d8d0b22a5740ce",
                  "tagType": "text"
                }
              ]
            }
            
+ Response 400 (application/json)

    + Body

            {
              "errors": {
                "order": [
                  "Invalid order"
                ],
                "limit": [
                  "Limit should be in the range 1..1000"
                ]
              }
            }
            
+ Response 404 (application/json)
    + Body

            {
              "errors": {
                "accountId": [
                  "Account not found"
                ]
              }
            }

## Is Alive [/api/isalive]

Validates service availability.

### API info [GET]

+ Response 200 (application/json)
    + Body

            {
              "name": "Api",
              "version": "1.0.0.0",
              "env": null,
              "hostName": "api-6d9cf8c746-qz478",
              "isDebug": false,
              "startedAt": "2020-03-23T13:45:41.5860463Z",
              "stateIndicators": []
            }